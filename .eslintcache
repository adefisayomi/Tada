[{"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\Home.js":"1","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\note\\Note.js":"2","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\context\\StateProvider.js":"3","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\firebase\\Config.js":"4","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\context\\reducers\\NoteReducer.js":"5","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\Signup.js":"6","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\App.js":"7","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\Login.js":"8","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\note\\EditNote.js":"9","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\Index.js":"10","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\EditAccount.js":"11","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\index.js":"12","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\ResetPassword.js":"13"},{"size":7415,"mtime":1606833864783,"results":"14","hashOfConfig":"15"},{"size":4383,"mtime":1606780751429,"results":"16","hashOfConfig":"15"},{"size":1362,"mtime":1606787843745,"results":"17","hashOfConfig":"15"},{"size":780,"mtime":1606822122822,"results":"18","hashOfConfig":"15"},{"size":1009,"mtime":1606781883031,"results":"19","hashOfConfig":"15"},{"size":7350,"mtime":1606834049141,"results":"20","hashOfConfig":"15"},{"size":1270,"mtime":1606685517782,"results":"21","hashOfConfig":"15"},{"size":4552,"mtime":1606782441851,"results":"22","hashOfConfig":"15"},{"size":5327,"mtime":1606793927764,"results":"23","hashOfConfig":"15"},{"size":482,"mtime":1606782329718,"results":"24","hashOfConfig":"15"},{"size":165,"mtime":1606416399758,"results":"25","hashOfConfig":"15"},{"size":222,"mtime":1606416856902,"results":"26","hashOfConfig":"15"},{"size":3182,"mtime":1606775408778,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1bn7z94",{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"39"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\Home.js",["66","67","68","69","70"],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\note\\Note.js",["71","72","73"],"import { Button, Form, Container, Confirm } from 'semantic-ui-react'\r\nimport {NoteState} from '../context/StateProvider'\r\nimport moment from 'moment'\r\nimport uuid from 'uuid/v1'\r\nimport { useState } from 'react'\r\nimport '../style/notes.css'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\n\r\nexport const SingleNote = ({title, date, id, action, edited, version}) => {\r\n    const history = useHistory()\r\n\r\n    const {dispatch, note, user} = NoteState()\r\n\r\n    const removeNote = () => { dispatch({type: 'removeNote', payload: {id}}) }\r\n\r\n    const [confirm, setConfirm] = useState(false)\r\n    const openConfirm = () => setConfirm(true)\r\n    const closeConfirm = () => setConfirm(false)\r\n\r\n    const handleDeleteNote = () => {\r\n        removeNote()\r\n        closeConfirm()\r\n    }\r\n    const handleEdit = () => {\r\n        action()\r\n        history.push(`/edit/${id}`)\r\n    }\r\n   \r\n\r\n    return (\r\n        <>\r\n        <div className=\"singlenote\">\r\n\r\n            <div className= 'singlenote__placeholder' onClick= {handleEdit}>\r\n                <span>\r\n                    {title.length <= 15 ? title : (title.slice(0, 15) + '...')}\r\n                </span>\r\n                \r\n                <span> {date} </span>\r\n            </div>\r\n            <Button \r\n                icon= 'cancel'\r\n                negative\r\n                onClick= {openConfirm}\r\n            />\r\n            <Confirm\r\n                header='Confirm delete'\r\n                content= 'Are you sure you want to delete this note'\r\n                open={confirm}\r\n                onCancel={closeConfirm}\r\n                onConfirm= {handleDeleteNote}\r\n                size='mini'\r\n                />\r\n           \r\n        </div>\r\n        {edited && <div className=\"singlenote__version\">\r\n                        <span  onClick= {() => history.push(`/edit/${id}/${version.id}`)}>\r\n                            v1\r\n                        </span>\r\n                    </div>}\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport const NoteForm = ({closeNote}) => {\r\n\r\n    const {dispatch, note, user} = NoteState()\r\n\r\n    const [form, setForm] = useState({title: '', note: ''})\r\n\r\n    const getForm = (e) => setForm({...form, [e.target.name]: e.target.value})\r\n\r\n    const resetForm = () => setForm({title: '', note: ''})\r\n\r\n    const clearForm = () => {\r\n        resetForm()\r\n        setError({isError:false})\r\n    }\r\n\r\n    const [error, setError] = useState({isError: false, msg: 'All fields are required'})\r\n\r\n    const addNote = () => {\r\n        dispatch({type: 'addNote', payload: {\r\n                user_id: user.uid,\r\n                title: form.title,\r\n                note: form.note,\r\n                date: moment().format(\"MMM Do YY\"),\r\n                edited: false,\r\n                version: [],\r\n                id: uuid()\r\n            }})\r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        // validat form\r\n        if(form.title === '' || form.note === ''){\r\n            setError({...error, isError: true})\r\n        }else{\r\n            setError({...error, isError: false})\r\n            addNote()\r\n            closeNote()\r\n            resetForm()\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div className=\"noteform\">\r\n            <Form onSubmit= {handleSubmit}>\r\n                <Form.Input\r\n                    name= 'title'\r\n                    placeholder= 'Title'\r\n                    icon= 'pencil'\r\n                    onChange= {getForm}\r\n                    value= {form.title}\r\n                    error= {error.isError ? error.msg : false}\r\n                />\r\n                <Form.TextArea\r\n                    name= 'note'\r\n                    placeholder= 'Note'\r\n                    style= {{minHeight: 200}}\r\n                    onChange= {getForm}\r\n                    value= {form.note}\r\n                    error= {error.isError ? error.msg : false}\r\n                />\r\n                <Container textAlign= 'center'>\r\n                    <Button\r\n                        content= 'Clear'\r\n                        negative\r\n                        onClick= {clearForm}\r\n                    />\r\n                    <Button\r\n                        content= 'Save'\r\n                        primary\r\n                        onClick= {handleSubmit}\r\n                    />\r\n                </Container>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\context\\StateProvider.js",["74","75"],"\r\nimport { useState, useContext, createContext, useReducer, useEffect } from 'react'\r\nimport NoteReducer from './reducers/NoteReducer'\r\nimport {Auth, DB, Storage} from '../firebase/Config'\r\n\r\nconst NoteContext = createContext()\r\n\r\nconst StateProvider = ({children}) => {\r\n   \r\n    // user state\r\n    const [user, setUser] = useState(null)\r\n\r\n// ------------------------------------------------------------------------\r\n\r\n// monitor user state\r\n    useEffect(() => {\r\n        // const currenUser = null\r\n        // console.log(currenUser)\r\n        Auth.onAuthStateChanged(user => {\r\n            if(user) {\r\n                setUser(user)\r\n            }\r\n            else {\r\n                setUser(null)\r\n            }\r\n        })\r\n    }, [user])\r\n// -------------------------------------------------------------------------\r\n\r\n  const [note, dispatch] = useReducer(NoteReducer, [], () => {\r\n      const initialNote = localStorage.getItem('Notes')\r\n      return ( initialNote ? JSON.parse(initialNote) : [])\r\n  })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('Notes', JSON.stringify([...note]))\r\n    }, [note])\r\n  \r\n\r\n    return (\r\n        <NoteContext.Provider value = {{ note, user, dispatch }}>\r\n            {children}\r\n        </NoteContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StateProvider\r\n\r\nexport const NoteState = () => useContext(NoteContext)",["76","77"],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\firebase\\Config.js",[],["78","79"],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\context\\reducers\\NoteReducer.js",["80","81"],"import uuid from 'uuid/v1'\r\n\r\nconst NoteReducer = (state, action) => {\r\n    switch(action.type) {\r\n\r\n        case 'addNote' : \r\n            return [...state, action.payload]\r\n\r\n        case 'removeNote' : \r\n            return (state = state.filter(note => note.id !== action.payload.id))\r\n\r\n        case 'editNote' :\r\n            const currentNote = [...state]\r\n            const array = []\r\n            currentNote.map(note => array.push(note.id))\r\n            const index = array.indexOf(action.payload.id)\r\n            currentNote[index] = action.payload\r\n            return (state = currentNote)\r\n        \r\n        case 'editVersion' :\r\n        const currentVersion = [...state]\r\n        const arr = []\r\n        currentVersion.map(note => arr.push(note.id))\r\n        const Index = arr.indexOf(action.payload.id)\r\n        currentVersion[Index].version = action.payload\r\n        return (state = currentVersion)\r\n        \r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport default NoteReducer\r\n",["82","83"],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\Signup.js",["84","85","86","87"],"import { useEffect, useState } from 'react'\r\nimport { Form, Button, Container, Divider, Label, Input } from 'semantic-ui-react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport {Auth, Storage, Provider} from '../firebase/Config'\r\nimport '../style/account.css'\r\nimport { NoteState } from '../context/StateProvider'\r\n\r\nconst Signup = () => {\r\n    const history = useHistory()\r\n    const {user} = NoteState()\r\n    ;\r\n\r\n    // useEffect(() => {\r\n    //     if(user) {\r\n    //         history.goBack()\r\n    //     }\r\n    // }, [])\r\n    \r\n    const [form, setForm] = useState({email: '', password: '', username: '', image: ''})\r\n\r\n    const resetForm = () => setForm({email: '', password: '', username: '', image: ''})\r\n\r\n    const getForm = (e) => {\r\n        validateForm()\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const [error, setError] = useState({isError: true, email: false, password: false, username: false, image: false, msg: ''})\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const validateForm = () => {\r\n\r\n        if(form.email.length === 0){\r\n            setError({...error, email: 'All fields are reaquired.', isError: true})\r\n        }\r\n        else if(form.username.length === 0) {\r\n            setError({...error, email: false, username: 'Username is required.', isError: true})\r\n        }\r\n        else if(form.password.length === 0) {\r\n            setError({...error, email: false, username: false, password: 'Password is required.', isError: true})\r\n        }\r\n        else {\r\n            setError({isError: false, email: false, password: false, username: false})\r\n        }\r\n    }\r\n\r\n    const getPicture = (e) => {\r\n        const validImageType = ['image/jpeg', 'image/png']\r\n\r\n        const img = e.target.files[0]\r\n\r\n        if( img && validImageType.includes(img.type)) {\r\n            setForm({...form, image: img})\r\n            setError({image: ''})\r\n        }else {\r\n            setForm({...form, image: ''})\r\n            setError({image: 'Image type not supported.'})\r\n        }\r\n   \r\n    }\r\n\r\n    \r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        setLoading(true)\r\n        if (form.image != '') {\r\n\r\n        Auth.createUserWithEmailAndPassword(form.email, form.password).then(data => {\r\n                        \r\n                        const uploader = Storage.ref().child(\"Users/images/ \" + data.user.uid)\r\n                        uploader.put(form.image).then(async () => {\r\n                        const imageUrl = await uploader.getDownloadURL()\r\n                        return imageUrl\r\n                    }).then((imageUrl) => {\r\n                        data.user.updateProfile({\r\n                            displayName: form.username,\r\n                            photoURL: imageUrl\r\n                        })\r\n                    })})\r\n                    .then(() => {\r\n                        setTimeout(() => {history.push('/')}, 3000)\r\n                    })\r\n                    .catch(err => {\r\n                        setLoading(false) \r\n                        setError({msg: err.message})\r\n                    })\r\n        }else {\r\n            Auth.createUserWithEmailAndPassword(form.email, form.password)\r\n            .then(data => {\r\n                data.user.updateProfile({\r\n                displayName: form.username\r\n            })\r\n            })\r\n            .then(() => {\r\n                setTimeout(() => {history.push('/')}, 2000)\r\n            })\r\n            .catch(err => {\r\n                setLoading(false) \r\n                setError({msg: err.message})\r\n            })\r\n        }\r\n    }\r\n       \r\n\r\n            // google sign up\r\n    const googleSignup = () => {\r\n        Auth.signInWithPopup(Provider).then(() => {\r\n            history.push('/')\r\n        })\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className=\"signup\">\r\n            <div className=\"signup__header\">\r\n                <h2>Tada</h2> <span>a note app that keeps track.</span>\r\n            </div>\r\n            \r\n             <div className= 'google__signup'>\r\n                 <Button \r\n                 fluid\r\n                    content= 'Create account with Google'\r\n                    icon= 'google'\r\n                    iconPosition= 'left'\r\n                    color= 'google plus'\r\n                    onClick= {googleSignup}\r\n                 />\r\n             </div>\r\n             <Divider \r\n                horizontal\r\n                content= 'OR'\r\n             />\r\n            <Form onSubmit= {handleSubmit}>\r\n                <Form.Input\r\n                    type= 'email'\r\n                    placeholder= 'Email'\r\n                    fluid\r\n                    icon= 'at'\r\n                    name= 'email'\r\n                    iconPosition= 'left'\r\n                    onChange= {getForm}\r\n                    value= {form.email}\r\n                    error= {error.email}\r\n                />\r\n                <Form.Input\r\n                    type= 'text'\r\n                    placeholder= 'Username'\r\n                    fluid\r\n                    icon= 'user'\r\n                    name= 'username'\r\n                    iconPosition= 'left'\r\n                    onChange= {getForm}\r\n                    value= {form.username}\r\n                    error= {error.username}\r\n                />\r\n                <Form.Input\r\n                    type= 'password'\r\n                    placeholder= 'Password'\r\n                    fluid\r\n                    icon= 'lock'\r\n                    name= 'password'\r\n                    iconPosition= 'left'\r\n                    onChange= {getForm}\r\n                    value= {form.password}\r\n                    error= {error.password}\r\n                />\r\n                <Container className = 'signup__fileUpload' textAlign= 'left' >\r\n                    <Label\r\n                        color= {form.image ? 'grey' : 'blue'}\r\n                        size= 'large'\r\n                        icon=  {form.image ? 'upload' : 'camera'}\r\n                        content= {<label for= 'imageUpload' >{form.image ? 'Profile picture selected' : 'Select a profile picture'}</label>}\r\n                    />\r\n                    {error.image && <p> {error.image}</p> }\r\n                    <Input\r\n                        type=\"file\"\r\n                        name=\"imageUpload\"\r\n                        id=\"imageUpload\"\r\n                        onChange = {getPicture}\r\n                            />\r\n                </Container>\r\n\r\n                <Container textAlign= 'center' >\r\n                    <Button \r\n                        content= 'Create account'\r\n                        color= 'black'\r\n                        onClick= {handleSubmit}\r\n                        loading= {loading}\r\n                    />\r\n                </Container>\r\n            </Form>\r\n                {error.msg && <span className = 'signup__err'>{error.msg}</span> }\r\n            \r\n            <div className=\"signup__details\">\r\n                <span>\r\n                   Already have an account? <Link to= '/account/login'>Login</Link>\r\n                </span>\r\n                <span>\r\n                     I forgot my  <span><Link to= '/account/password/reset'>Password</Link></span>\r\n                </span>\r\n            </div>\r\n           \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\App.js",[],["88","89"],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\Login.js",["90"],"import { Form, Button, Container, Divider } from 'semantic-ui-react'\r\nimport { Link, useHistory, Redirect } from 'react-router-dom'\r\nimport '../style/account.css'\r\nimport { useEffect, useState } from 'react'\r\nimport {  NoteState} from '../context/StateProvider'\r\nimport { Auth, Provider } from '../firebase/Config'\r\n\r\nconst Login = () => {\r\n    const history = useHistory()\r\n\r\n    const {user} = NoteState()\r\n\r\n    useEffect(() => {\r\n        if(user) {\r\n            history.goBack()\r\n        }\r\n    })\r\n\r\n    const [form, setForm] = useState({email: '', password: ''})\r\n\r\n    const resetForm = () => setForm({email: '', password: ''})\r\n\r\n    const getForm = (e) => {\r\n        validateForm()\r\n        setForm({...form, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const [error, setError] = useState({isError: true, email: false, password: false, msg: ''})\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const validateForm = () => {\r\n\r\n        if(form.email.length === 0){\r\n            setError({...error, email: 'All fields are reaquired.', isError: true})\r\n        }\r\n        else if(form.password.length === 0) {\r\n            setError({...error, email: false, password: 'Password is required.', isError: true})\r\n        }\r\n        else {\r\n            setError({isError: false, email: false, password: false})\r\n        }\r\n    }\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        setLoading(true)\r\n\r\n        await Auth.signInWithEmailAndPassword(form.email, form.password)\r\n        .then(() => {\r\n            resetForm()\r\n            history.push('/')\r\n        })\r\n        .catch(err => {\r\n            setLoading(false)\r\n            if(err.message === 'The email address is badly formatted.'){\r\n                setError({msg: 'Email is not valid'})\r\n            }\r\n            else if (err.message === 'There is no user record corresponding to this identifier. The user may have been deleted.'){\r\n                setError({msg: 'User does not exist'})\r\n            }\r\n            else {\r\n                setError({msg : err.message})\r\n            }\r\n            \r\n        })\r\n\r\n    }\r\n    const googleLogin = () => {\r\n        Auth.signInWithPopup(Provider).then(() => {\r\n            history.goBack()\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"signup__header\">\r\n                <h2>Tada</h2> <span>a note app that keeps track.</span>\r\n            </div>\r\n            <div className= 'google__signup'>\r\n                 <Button \r\n                    fluid\r\n                    content= 'Continue with Google'\r\n                    icon= 'google'\r\n                    iconPosition= 'left'\r\n                    color= 'blue'\r\n                    onClick= {googleLogin}\r\n                 />\r\n             </div>\r\n             <Divider \r\n                horizontal\r\n                content= 'OR'\r\n             />\r\n            <Form onSubmit= {handleSubmit}>\r\n                <Form.Input\r\n                    type= 'email' \r\n                    name= 'email'\r\n                    placeholder= 'Email'\r\n                    icon= 'at'\r\n                    iconPosition= 'left'\r\n                    fluid\r\n                    onChange= {getForm}\r\n                    value= {form.email}\r\n                    error= {error.email}\r\n                />\r\n                <Form.Input \r\n                    type= 'password'\r\n                    name= 'password'\r\n                    placeholder= 'Password'\r\n                    icon= 'lock'\r\n                    iconPosition= 'left'\r\n                    fluid\r\n                    onChange= {getForm}\r\n                    value= {form.password}\r\n                    error= {error.password}\r\n                />\r\n                <Container textAlign= 'center'>\r\n                   <Button \r\n                    content='Login'\r\n                    color= 'black'\r\n                    onClick= {handleSubmit}\r\n                    loading= {loading}\r\n                /> \r\n                </Container>\r\n                \r\n            </Form>\r\n            {error.msg && <span className= 'login__err'>{error.msg}</span>}\r\n            <div className= 'login__details'>\r\n                <span>\r\n                    Forgot your password? click <span><Link to= '/account/password/reset'>Here</Link></span>\r\n                </span>\r\n                <span>\r\n                   <Link to= '/account/signup'>Create account.</Link>\r\n                </span>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\note\\EditNote.js",["91","92","93","94","95","96"],"import '../style/notes.css'\r\nimport Home from '../Home'\r\nimport { Form, Container, Button } from 'semantic-ui-react'\r\nimport {NoteState} from '../context/StateProvider'\r\nimport { useEffect, useState } from 'react'\r\nimport moment from 'moment'\r\nimport uuid from 'uuid/v1'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst EditNote = ({match}) => {\r\n\r\n    const history = useHistory()\r\n    const {user, note, dispatch} = NoteState()\r\n\r\n    useEffect(() => {\r\n        if(user === null) {\r\n            history.push('/account/login')\r\n        }\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        if(note.length === 0) {\r\n            history.push('/')\r\n        }\r\n    },[note])\r\n\r\n    const [requestMode, setRequestMode] = useState('')\r\n    \r\n    useEffect(() => {\r\n\r\n        if(match.path === \"/edit/:id/:version\") {\r\n            setRequestMode('version')\r\n\r\n            const edit = note.filter(note => note.id === match.params.id)\r\n            edit.map(note => {\r\n                setForm({\r\n                    version: null,\r\n                    title: note.version.title,\r\n                    note: note.version.note,\r\n                    date: note.version.date,\r\n                    id: note.version.id,\r\n                    user_id: note.version.user_id,\r\n                    edited: true\r\n                })\r\n            })\r\n      \r\n        }\r\n        if(match.path === \"/edit/:id\") {\r\n            setRequestMode('id')\r\n              const edit = note.filter(note => note.id === match.params.id)\r\n                edit.map(note => {\r\n            setForm({\r\n                version: {\r\n                    title: note.title,\r\n                    note: note.note,\r\n                    date: note.date,\r\n                    id: note.id,\r\n                    user_id: note.user_id,\r\n                    edited: false\r\n                },\r\n                title: note.title,\r\n                note: note.note,\r\n                date: note.date,\r\n                id: note.id,\r\n                user_id: note.user_id,\r\n                edited: true\r\n            })\r\n        })\r\n        }\r\n      \r\n    },[match.params])\r\n\r\n \r\n    // --------------------------------\r\n\r\n    const [form, setForm] = useState({title: '', note: ''})\r\n\r\n    const getForm = (e) => setForm({...form, [e.target.name]: e.target.value})\r\n\r\n    const resetForm = () => setForm({title: '', note: ''})\r\n\r\n    const clearForm = () => {\r\n        resetForm()\r\n        setError({isError:false})\r\n    }\r\n    const [error, setError] = useState({isError: false, msg: 'All fields are required'})\r\n\r\n    const addNote = () => {\r\n        if(requestMode === 'id') {\r\n             dispatch({type: 'editNote', payload: {\r\n            user_id: user.uid,\r\n            title: form.title,\r\n            note: form.note,\r\n            date: moment().format(\"MMM Do YY\"),\r\n            edited: true,\r\n            version: form.version,\r\n            id: form.id\r\n            }})\r\n        }\r\n        else if (requestMode === 'version') {\r\n            dispatch({type: 'editVersion', payload: {\r\n                user_id: user.uid,\r\n                title: form.title,\r\n                note: form.note,\r\n                date: moment().format(\"MMM Do YY\"),\r\n                edited: true,\r\n                version: form.version,\r\n                id: form.id\r\n                }})\r\n        }\r\n       \r\n    }\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        // validat form\r\n        if(form.title === '' || form.note === ''){\r\n            setError({...error, isError: true})\r\n        }else{\r\n            setError({...error, isError: false})\r\n            addNote()\r\n            resetForm()\r\n            history.push('/')\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"editnote\">\r\n            <Home>\r\n                \r\n                <div className= 'home__button'>\r\n                    <p>Editing ...</p>\r\n                    <Button\r\n                    content= 'create new note'\r\n                    primary\r\n                    onClick= { () => history.push('/')}\r\n                />\r\n                \r\n                </div>\r\n                \r\n            <Form onSubmit= {handleSubmit}>\r\n                <Form.Input\r\n                    name= 'title'\r\n                    placeholder= 'Title'\r\n                    icon= 'pencil'\r\n                    onChange= {getForm}\r\n                    value= {form.title}\r\n                    error= {error.isError ? error.msg : false}\r\n                />\r\n                <Form.TextArea\r\n                    name= 'note'\r\n                    placeholder= 'Note'\r\n                    style= {{minHeight: 200}}\r\n                    onChange= {getForm}\r\n                    value= {form.note}\r\n                    error= {error.isError ? error.msg : false}\r\n                />\r\n                <Container textAlign= 'center'>\r\n                    <Button\r\n                        content= 'Clear'\r\n                        negative\r\n                        onClick= {clearForm}\r\n                    />\r\n                    <Button\r\n                        content= 'Save'\r\n                        primary\r\n                        onClick= {handleSubmit}\r\n                    />\r\n                </Container>\r\n            </Form>\r\n            </Home>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditNote","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\Index.js",["97","98","99"],"import Home from './Home'\r\nimport {Redirect, useHistory} from 'react-router-dom'\r\nimport {NoteState} from './context/StateProvider'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst Index = () => {\r\n    const history = useHistory()\r\n    const {user} = NoteState()\r\n    useEffect(() => {\r\n        if(user === null) {\r\n            history.push('/account/login')\r\n        }\r\n    }, [user])\r\n    return (\r\n        <>\r\n        <Home /> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index","C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\EditAccount.js",[],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\index.js",[],"C:\\Users\\iooi\\Desktop\\Tada\\tada\\src\\components\\account\\ResetPassword.js",["100","101","102","103"],"import { useState} from 'react'\r\nimport { Link, Redirect, useHistory } from 'react-router-dom'\r\nimport { Form, Button, Container } from 'semantic-ui-react'\r\nimport {Auth} from '../firebase/Config'\r\nimport '../style/account.css'\r\n\r\nconst ResetPassword = () => {\r\n\r\n    const history = useHistory()\r\n\r\n    const [form, setForm] = useState({email: ''})\r\n\r\n    const resetForm = (e) => setForm({email: ''})\r\n\r\n    const getForm = (e) => setForm({...form, [e.target.name]: e.target.value})\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [error, setError] = useState({isError: false, msg: '', email: false})\r\n\r\n    const [confirm, setConfirm] = useState({form: '', confirm: 'none'})\r\n\r\n    const confirmSubmit = () => setConfirm({form: 'none', confirm: ''})\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        if(form.email === '') {\r\n            setLoading(false)\r\n            setError({...error, isError: true, email: 'Email is required.'})\r\n        }else {\r\n            setLoading(true)\r\n            setError({isError: false})\r\n                Auth.sendPasswordResetEmail(form.email).then(() => {\r\n                   //resetForm() \r\n                   confirmSubmit()\r\n                   setLoading(false)\r\n                }).catch (err => {\r\n                    if(err.message === 'There is no user record corresponding to this identifier. The user may have been deleted.'){\r\n                        setLoading(false)\r\n                        setError({msg: 'This email is not registerd on this app.'})\r\n                    }else{\r\n                        setLoading(false)\r\n                    setError({msg: err.message})\r\n                    }\r\n                })\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"password\">\r\n            <div className=\"signup__header\">\r\n                <h2>Tada</h2> <span>a note app that keeps track.</span>\r\n            </div>\r\n            <Form onSubmit= {handleSubmit}  style= {{display: confirm.form}}>\r\n                <Form.Input\r\n                    type= 'email'\r\n                    placeholder= 'Enter your valid email address'\r\n                    icon= 'at'\r\n                    iconPosition= 'right'\r\n                    fluid\r\n                    name= 'email'\r\n                    onChange= {getForm}\r\n                    error= {error.email}\r\n                />\r\n                <Container textAlign= 'center'>\r\n                    <Button\r\n                        content= 'Reset Password'\r\n                        color= 'black'\r\n                        onClick= {handleSubmit}\r\n                        loading= {loading}\r\n                    />\r\n                </Container>\r\n            </Form>\r\n                {error.msg && <span className= 'password__err'>{error.msg}</span>}\r\n            <div className= {`password__confirm`} style= {{display: confirm.confirm}}>\r\n                <p>We sent a password reset link to your email @</p>\r\n                    <span>{form.email}</span>\r\n                    <p>Go to your inbox and confirm password reset</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResetPassword",{"ruleId":"104","severity":1,"message":"105","line":1,"column":36,"nodeType":"106","messageId":"107","endLine":1,"endColumn":41},{"ruleId":"108","severity":1,"message":"109","line":35,"column":8,"nodeType":"110","endLine":35,"endColumn":14,"suggestions":"111"},{"ruleId":"104","severity":1,"message":"112","line":67,"column":18,"nodeType":"106","messageId":"107","endLine":67,"endColumn":23},{"ruleId":"108","severity":1,"message":"113","line":83,"column":8,"nodeType":"110","endLine":83,"endColumn":14,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":91,"column":25,"nodeType":"117","endLine":95,"endColumn":27},{"ruleId":"104","severity":1,"message":"118","line":14,"column":22,"nodeType":"106","messageId":"107","endLine":14,"endColumn":26},{"ruleId":"104","severity":1,"message":"119","line":14,"column":28,"nodeType":"106","messageId":"107","endLine":14,"endColumn":32},{"ruleId":"104","severity":1,"message":"118","line":70,"column":22,"nodeType":"106","messageId":"107","endLine":70,"endColumn":26},{"ruleId":"104","severity":1,"message":"120","line":4,"column":15,"nodeType":"106","messageId":"107","endLine":4,"endColumn":17},{"ruleId":"104","severity":1,"message":"121","line":4,"column":19,"nodeType":"106","messageId":"107","endLine":4,"endColumn":26},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"104","severity":1,"message":"128","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":12},{"ruleId":"104","severity":1,"message":"129","line":24,"column":15,"nodeType":"106","messageId":"107","endLine":24,"endColumn":20},{"ruleId":"122","replacedBy":"130"},{"ruleId":"124","replacedBy":"131"},{"ruleId":"104","severity":1,"message":"132","line":1,"column":10,"nodeType":"106","messageId":"107","endLine":1,"endColumn":19},{"ruleId":"104","severity":1,"message":"119","line":10,"column":12,"nodeType":"106","messageId":"107","endLine":10,"endColumn":16},{"ruleId":"104","severity":1,"message":"133","line":21,"column":11,"nodeType":"106","messageId":"107","endLine":21,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":68,"column":24,"nodeType":"136","messageId":"137","endLine":68,"endColumn":26},{"ruleId":"122","replacedBy":"138"},{"ruleId":"124","replacedBy":"139"},{"ruleId":"104","severity":1,"message":"140","line":2,"column":28,"nodeType":"106","messageId":"107","endLine":2,"endColumn":36},{"ruleId":"104","severity":1,"message":"128","line":7,"column":8,"nodeType":"106","messageId":"107","endLine":7,"endColumn":12},{"ruleId":"108","severity":1,"message":"141","line":19,"column":8,"nodeType":"110","endLine":19,"endColumn":14,"suggestions":"142"},{"ruleId":"108","severity":1,"message":"141","line":25,"column":7,"nodeType":"110","endLine":25,"endColumn":13,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":36,"column":27,"nodeType":"146","messageId":"147","endLine":36,"endColumn":29},{"ruleId":"144","severity":1,"message":"145","line":52,"column":31,"nodeType":"146","messageId":"147","endLine":52,"endColumn":33},{"ruleId":"108","severity":1,"message":"148","line":72,"column":7,"nodeType":"110","endLine":72,"endColumn":21,"suggestions":"149"},{"ruleId":"104","severity":1,"message":"140","line":2,"column":9,"nodeType":"106","messageId":"107","endLine":2,"endColumn":17},{"ruleId":"104","severity":1,"message":"150","line":4,"column":21,"nodeType":"106","messageId":"107","endLine":4,"endColumn":29},{"ruleId":"108","severity":1,"message":"141","line":13,"column":8,"nodeType":"110","endLine":13,"endColumn":14,"suggestions":"151"},{"ruleId":"104","severity":1,"message":"152","line":2,"column":10,"nodeType":"106","messageId":"107","endLine":2,"endColumn":14},{"ruleId":"104","severity":1,"message":"140","line":2,"column":16,"nodeType":"106","messageId":"107","endLine":2,"endColumn":24},{"ruleId":"104","severity":1,"message":"153","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":18},{"ruleId":"104","severity":1,"message":"133","line":13,"column":11,"nodeType":"106","messageId":"107","endLine":13,"endColumn":20},"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateUser'. Either include it or remove the dependency array.","ArrayExpression",["154"],"'array' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'doSearch'. Either include it or remove the dependency array.",["155"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'note' is assigned a value but never used.","'user' is assigned a value but never used.","'DB' is defined but never used.","'Storage' is defined but never used.","no-native-reassign",["156"],"no-negated-in-lhs",["157"],["156"],["157"],"'uuid' is defined but never used.","'Index' is assigned a value but never used.",["156"],["157"],"'useEffect' is defined but never used.","'resetForm' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["156"],["157"],"'Redirect' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["158"],["159"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'match.path' and 'note'. Either include them or remove the dependency array.",["160"],"'useState' is defined but never used.",["161"],"'Link' is defined but never used.","'history' is assigned a value but never used.",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},"no-global-assign","no-unsafe-negation",{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"166","fix":"172"},"Update the dependencies array to be: [updateUser, user]",{"range":"173","text":"174"},"Update the dependencies array to be: [doSearch, form]",{"range":"175","text":"176"},"Update the dependencies array to be: [history, user]",{"range":"177","text":"178"},"Update the dependencies array to be: [history, note]",{"range":"179","text":"180"},"Update the dependencies array to be: [match.params, match.path, note]",{"range":"181","text":"182"},{"range":"183","text":"178"},[1148,1154],"[updateUser, user]",[2367,2373],"[doSearch, form]",[554,560],"[history, user]",[669,675],"[history, note]",[2137,2151],"[match.params, match.path, note]",[383,389]]